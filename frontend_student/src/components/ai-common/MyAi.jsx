import React, {
  useEffect,
  useState,
  useCallback,
  useMemo,
  useRef,
} from "react";
import axios from "axios";
import { useUser } from "@clerk/clerk-react";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import { useLocation } from "react-router-dom";
import "./style/MyAi.css";

// Constants
const SUGGESTIONS = [
  "Xin g·ª£i √Ω l·ªô tr√¨nh √¥n thi nhanh",
  "Gi·∫£i th√≠ch ƒë·ªãnh l√Ω Pythagoras d·ªÖ hi·ªÉu",
  "T√≥m t·∫Øt ch∆∞∆°ng 1 V·∫≠t l√Ω 10",
  "G·ª£i √Ω t·ª´ kho√° ƒë·ªÉ l√†m ƒë·ªÅ c∆∞∆°ng",
];
const DEFAULT_AVATAR =
  "https://cdn-icons-png.flaticon.com/512/4712/4712035.png";
const AI_AVATAR =
  "https://icdn.dantri.com.vn/a3HWDOlTcvMNT73KRccc/Image/2013/05/3-904f5.jpg";

// Helpers
const currencyVND = (n) =>
  Number(n || 0).toLocaleString("vi-VN", { maximumFractionDigits: 0 });

const pickStudentPersonalStack = (stacks = []) => {
  // T√¨m ch√≠nh x√°c "Bot h·ªó tr·ª£ c√° nh√¢n"
  const exact = stacks.find(
    (s) => (s.stack_name || "").trim().toLowerCase() === "bot h·ªó tr·ª£ c√° nh√¢n"
  );

  if (exact) return exact;

  // Backup: t√¨m stack c√≥ ch·ª©a "c√° nh√¢n" ho·∫∑c "sinh vi√™n"
  return stacks.find((s) => {
    const name = (s.stack_name || "").toLowerCase();
    return name.includes("c√° nh√¢n") || name.includes("sinh vi√™n");
  });
};

// Small UI bits (kh√¥ng thay ƒë·ªïi layout t·ªïng th·ªÉ)
const Loading = () => (
  <div className="myai-container">
    <div className="myai-blur-content">
      <div className="myai-center">
        <div
          style={{
            padding: "2rem",
            textAlign: "center",
            fontSize: "1.2rem",
            color: "#666",
          }}
        >
          <div className="loading-spinner" style={{ marginBottom: "1rem" }} />
          ƒêang t·∫£i My AI...
        </div>
      </div>
    </div>
  </div>
);

const SuggestionButton = React.memo(({ text, onClick }) => (
  <button className="ai-suggestion" onClick={onClick}>
    {text}
  </button>
));

// Khi ch∆∞a c√≥ bot => hi·ªÉn th·ªã ƒë√∫ng 1 g√≥i cho sinh vi√™n
const NoBotView = ({ stack, onActivate }) => (
  <div className="myai-container">
    <div className="myai-blur-content">
      <div className="myai-center">
        <img src={DEFAULT_AVATAR} alt="AI avatar" className="myai-avatar" />
        <h2 className="myai-title">AI H·ªó Tr·ª£ H·ªçc T·∫≠p</h2>
        <p className="myai-desc">
          Tr·ª£ l√Ω AI gi√∫p b·∫°n h·ªçc hi·ªáu qu·∫£ h∆°n. K√≠ch ho·∫°t ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng.
        </p>
      </div>
    </div>

    <div className="stack-overlay">
      {!stack ? (
        <div className="stack-card student-ai">
          <h3>ƒêang t·∫£i g√≥i...</h3>
          <p>Vui l√≤ng ch·ªù gi√¢y l√°t</p>
        </div>
      ) : (
        <div className="stack-card student-ai">
          <div className="stack-card-badge">D√†nh cho sinh vi√™n</div>
          <h3>{stack.stack_name}</h3>
          <div className="stack-features">
            <div className="stack-feature">‚úì Tr·ª£ gi√∫p b√†i t·∫≠p</div>
            <div className="stack-feature">‚úì Gi·∫£i ƒë√°p 24/7</div>
            <div className="stack-feature">‚úì G·ª£i √Ω √¥n t·∫≠p</div>
            <div className="stack-feature">‚úì T·∫°o ƒë·ªÅ c∆∞∆°ng</div>
          </div>
          <p className="stack-description">
            {stack.stack_detail || "Tr·ª£ l√Ω AI cho h·ªçc t·∫≠p"}
          </p>
          <div className="stack-price">
            {currencyVND(stack.stack_price)}‚Ç´
            <span className="price-period">/th√°ng</span>
          </div>
          <button
            className="stack-activate-btn"
            onClick={() => onActivate(stack)}
          >
            üéì K√≠ch ho·∫°t ngay
          </button>
        </div>
      )}
    </div>
  </div>
);

// Sidebar chat (gi·ªØ class UI c≈©)
const AISidebar = ({ bot, onNavigate }) => {
  const ref = useRef(null);
  const [isResizing, setIsResizing] = useState(false);
  const [w, setW] = useState(360);

  useEffect(() => {
    const mm = (e) => {
      if (!isResizing) return;
      const newW = window.innerWidth - e.clientX;
      if (newW >= 280 && newW <= 600) {
        setW(newW);
        if (ref.current) ref.current.style.width = `${newW}px`;
      }
    };
    const mu = () => {
      setIsResizing(false);
      document.body.style.cursor = "default";
      document.body.style.userSelect = "auto";
    };
    if (isResizing) {
      document.addEventListener("mousemove", mm);
      document.addEventListener("mouseup", mu);
      document.body.style.cursor = "ew-resize";
      document.body.style.userSelect = "none";
    }
    return () => {
      document.removeEventListener("mousemove", mm);
      document.removeEventListener("mouseup", mu);
    };
  }, [isResizing]);

  const md = (e) => {
    const rect = ref.current.getBoundingClientRect();
    if (e.clientX - rect.left <= 8) setIsResizing(true);
  };

  return (
    <div
      ref={ref}
      className="ai-sidebar"
      style={{ width: `${w}px` }}
      onMouseDown={md}
    >
      <div className="ai-search">
        <input placeholder="T√¨m ki·∫øm..." />
        <button className="ai-search-clear">‚úï</button>
      </div>
      <div className="ai-newchat">
        <span className="newchat-icon">‚ú®</span>
        <span>Cu·ªôc tr√≤ chuy·ªán m·ªõi</span>
      </div>

      {/* Bot info nh·ªè ·ªü cu·ªëi */}
      <div className="ai-bot-mini">
        <div className="ai-bot-mini__head">
          <img src={bot?.avatar || AI_AVATAR} alt="bot" />
          <div className="ai-bot-mini__meta">
            <div className="ai-bot-mini__name">{bot?.name || "My AI"}</div>
            <div className="ai-bot-mini__desc">
              {(bot?.description || "").slice(0, 64)}
            </div>
          </div>
        </div>
      </div>

      <button
        className="button save-button"
        style={{ marginTop: "auto" }}
        onClick={onNavigate}
      >
        üìö My AI Knowledge
      </button>
    </div>
  );
};

// Khu v·ª±c ch√≠nh khi ƒë√£ c√≥ bot
const AIMainContent = ({ bot, user }) => {
  const displayName = useMemo(
    () => user?.fullName || user?.username || "User",
    [user]
  );
  const onPick = useCallback((s) => toast.info(`ƒê√£ ch·ªçn: ${s}`), []);
  return (
    <div className="ai-main">
      <div className="ai-avatar">
        <img src={bot?.avatar || AI_AVATAR} alt="AI avatar" />
      </div>
      <h2 className="ai-title">{bot?.name || "My AI"}</h2>
      <p className="ai-subtitle">
        {displayName} <span title="Th√¥ng tin ng∆∞·ªùi d√πng">‚ìò</span>
      </p>
      <p className="ai-desc">
        {bot?.description || "B·∫°n c√≥ th·ªÉ h·ªèi m·ªçi th·ª© li√™n quan h·ªçc t·∫≠p."}
      </p>
      <div className="ai-suggestions">
        {SUGGESTIONS.map((s) => (
          <SuggestionButton key={s} text={s} onClick={() => onPick(s)} />
        ))}
      </div>
      <div className="ai-input-bar">
        <span className="ai-plus">Ôºã</span>
        <input placeholder="H·ªèi g√¨ c≈©ng ƒë∆∞·ª£c..." />
        <button className="ai-mic">üé§</button>
      </div>
    </div>
  );
};

export default function MyAi() {
  const { user } = useUser();
  const navigate = useNavigate();
  const location = useLocation();

  const [bot, setBot] = useState(null);
  const [stack, setStack] = useState(null);
  const [loading, setLoading] = useState(true);

  // T·∫£i bot c·ªßa user ho·∫∑c hi·ªÉn th·ªã ƒë√∫ng 1 g√≥i ‚ÄúBot h·ªó tr·ª£ c√° nh√¢n‚Äù n·∫øu ch∆∞a c√≥ bot
  const fetchData = useCallback(async () => {
    if (!user?.id) return;
    try {
      setLoading(true);

      // 1) Ki·ªÉm tra user ƒë√£ c√≥ bot hay ch∆∞a
      //    BE c·∫ßn h·ªó tr·ª£ GET /api/aibot/owner/:userId
      const botRes = await axios.get(
        `${import.meta.env.VITE_BE_URL}/api/aibot/owner/${user.id}`
      );
      if (Array.isArray(botRes.data) && botRes.data.length > 0) {
        setBot(botRes.data[0]);
        return;
      }

      // 2) Ch∆∞a c√≥ bot => ch·ªâ hi·ªÉn th·ªã 1 g√≥i duy nh·∫•t ‚ÄúBot h·ªó tr·ª£ c√° nh√¢n‚Äù
      const stackRes = await axios.get(
        `${import.meta.env.VITE_BE_URL}/api/stack`
      );
      const raw = stackRes.data;
      const stacks = Array.isArray(raw) ? raw : raw.stacks || raw.data || [];
      const personal = pickStudentPersonalStack(stacks || []);
      setStack(personal || null);
    } catch (err) {
      console.error("L·ªói t·∫£i My AI:", err);
      toast.error("Kh√¥ng th·ªÉ t·∫£i My AI");
    } finally {
      setLoading(false);
    }
  }, [user?.id]);

  useEffect(() => {
    const p = new URLSearchParams(location.search);
    if (p.get("payment") === "failed")
      toast.error("Thanh to√°n th·∫•t b·∫°i ho·∫∑c ƒë√£ h·ªßy.");
    if (p.get("payment") === "success")
      toast.success("K√≠ch ho·∫°t g√≥i th√†nh c√¥ng! Bot ƒë√£ s·∫µn s√†ng.");
    if (p.get("payment") === "error")
      toast.error("C√≥ l·ªói khi x√°c th·ª±c thanh to√°n, vui l√≤ng th·ª≠ l·∫°i.");

    fetchData();
  }, [fetchData, location.search]);

  // B·∫•m thanh to√°n -> t·∫°o link PayOS
  const handleActivateStack = useCallback(
    async (selectedStack) => {
      try {
        // 1) Log b·∫Øt ƒë·∫ßu function
        console.log("[MyAi] handleActivateStack called with:", selectedStack);

        // 2) Ki·ªÉm tra VITE_BE_URL
        const be = import.meta.env.VITE_BE_URL;
        console.log("[MyAi] Backend URL:", be);

        if (!be) {
          throw new Error("Thi·∫øu c·∫•u h√¨nh m√°y ch·ªß (VITE_BE_URL)");
        }

        // 3) Ki·ªÉm tra user v√† stack
        console.log("[MyAi] User info:", {
          id: user?.id,
          firstName: user?.firstName,
          lastName: user?.lastName,
        });

        console.log("[MyAi] Stack info:", {
          id: selectedStack?._id,
          name: selectedStack?.stack_name,
          price: selectedStack?.stack_price,
        });

        if (!user?.id || !selectedStack?._id) {
          throw new Error(
            `Thi·∫øu th√¥ng tin ${!user?.id ? "ng∆∞·ªùi d√πng" : "g√≥i ƒëƒÉng k√Ω"}`
          );
        }

        // 4) G·ªçi API t·∫°o payment
        const paymentUrl = `${be}/api/payment`;
        const paymentData = {
          user_id: user.id,
          stack_id: selectedStack._id,
        };

        console.log("[MyAi] Calling payment API:", {
          url: paymentUrl,
          data: paymentData,
        });

        const res = await axios.post(paymentUrl, paymentData);

        // 5) Log response ƒë·∫ßy ƒë·ªß
        console.log("[MyAi] Payment API full response:", {
          status: res.status,
          headers: res.headers,
          data: res.data,
        });

        // 6) Validate response URL
        if (!res.data?.url) {
          console.error("[MyAi] Invalid response format:", res.data);
          throw new Error(
            "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c link thanh to√°n t·ª´ m√°y ch·ªß. " +
              "Response data: " +
              JSON.stringify(res.data)
          );
        }

        // 7) Chuy·ªÉn h∆∞·ªõng v·ªõi window.open
        console.log("[MyAi] Redirecting to payment URL:", res.data.url);
        window.location.href = res.data.url;
      } catch (err) {
        // 8) Log l·ªói chi ti·∫øt
        console.error("[MyAi] Payment initiation failed:", {
          error: err,
          response: err.response,
          stack: err.stack,
        });

        // 9) Toast v·ªõi message r√µ r√†ng
        const message =
          err.response?.data?.message ||
          err.message ||
          "Kh√¥ng th·ªÉ kh·ªüi t·∫°o thanh to√°n";
        toast.error(message);

        // 10) Th√¥ng b√°o th√™m n·∫øu l√† l·ªói CORS
        if (err.message.includes("CORS")) {
          toast.error(
            "L·ªói k·∫øt n·ªëi t·ªõi m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra CORS settings."
          );
        }
      }
    },
    [user?.id, user?.firstName, user?.lastName]
  );

  const handleNavigateToKnowledge = useCallback(() => {
    if (bot?._id) navigate(`/dashboard/bot-knowledge/${bot._id}`);
  }, [bot, navigate]);

  // Render
  if (loading) return <Loading />;

  // Ch∆∞a c√≥ bot -> ch·ªâ th·∫•y ƒë√∫ng 1 g√≥i
  if (!bot) {
    return <NoBotView stack={stack} onActivate={handleActivateStack} />;
  }

  // ƒê√£ c√≥ bot -> giao di·ªán My AI
  return (
    <div className="ai-layout">
      <AIMainContent bot={bot} user={user} />
      <AISidebar bot={bot} onNavigate={handleNavigateToKnowledge} />
    </div>
  );
}
